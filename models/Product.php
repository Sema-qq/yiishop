<?php

namespace app\models;

use Yii;
use yii\data\Pagination;

/**
 * This is the model class for table "product".
 *
 * @property integer $id
 * @property string $name
 * @property integer $category_id
 * @property integer $code
 * @property double $price
 * @property integer $availability
 * @property string $brand
 * @property string $image
 * @property string $description
 * @property integer $is_new
 * @property integer $is_recommended
 * @property integer $status
 */
class Product extends \yii\db\ActiveRecord
{
    /**
     * таблица продукт
     */
    public static function tableName()
    {
        return 'product';
    }

    /**
     * валидация
     */
    public function rules()
    {
        return [
            [['price', 'code'], 'integer'],
            [['description'], 'string'],
            [['name', 'brand'], 'string', 'max' => 255],
            [['name','price','description'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование',
            'category_id' => 'Категория',
            'code' => 'Код товара',
            'price' => 'Цена',
            'availability' => 'Наличие',
            'brand' => 'Брэнд',
            'image' => 'Фото',
            'description' => 'Описание',
            'is_new' => 'Новый',
            'is_recommended' => 'Рекомендованный',
            'status' => 'Статус',
        ];
    }

    //получаем и сохраняем название картинки в таблице
    public function saveImage($filename)
    {
        //присваиваем свойство image основанное на таблице
        $this->image = $filename;
        //сохраняем без валидации
        return $this->save(false);
    }

    //метод вывода картинки в листинге
    public function getImage()
    {
        //если картинка есть
        if ($this->image)
        {
            //выводим её
            return '/uploads/'.$this->image;
        }
        //иначе выводим картинку, что картинки нет
        return '/no-image.png';
        //вместо условного оператора и ретюрна можно было записать одной строчкой
        //return ($this->image) ? '/uploads/'.$this->image : '/no-image.png';
    }

    //удаление картинки при удалении товара
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    //метод который автоматически запускается при удалении товара
    public function beforeDelete()
    {
        //вызываем метод удалени картинки при удалении товара
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    //метод привязки категории к товару
    public function getCategory ()
    {
        //товар может иметь только одну категорию, id товара привязываем к id категории
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    //метод сохранения категории
    public function saveCategory ($category_id)
    {
        //вытаскиваем категорию из базы
        $category = Category::findOne($category_id);
        if ($category != null)      //если категория не null, то
        {
            //в метод link передаем название связи (getCategory) и модель с которой хотим связаться (Category)
            $this->link('category', $category);
            //и возвращаем true, т.к. метод сам этого не делает
            return true;
        }
    }

    //пагинация
    public static function getAll ($pageSize = 3)
    {
        //формируем запрос
        $query = Product::find();
        //берем количество товаров
        $count = $query->count();
        //количество товаров передаем в класс пагинации
        $pagination = new Pagination(['totalCount'=>$count, 'pageSize'=>$pageSize]);
        //лимитируем наш запрос используя пагинацию и выводим статьи
        $products = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        //передаем товары и пагинацию в массив
        $data['products'] = $products;
        $data['pagination'] = $pagination;

        return $data;
    }
}
